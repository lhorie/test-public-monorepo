{"version":3,"file":"node.js","sources":["../src/index.js","../src/__tests__/index.node.js"],"sourcesContent":["/** Copyright (c) 2018 Uber Technologies, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport {createReactor} from 'redux-reactors';\nimport type {Reactor} from 'redux-reactors';\nimport type {Reducer, Store} from 'redux';\n\ntype ActionType = {\n  type: string,\n  payload: *,\n};\n\ntype RPCReactorsType<TType, TPayload> = {\n  start: Reactor<TType, TPayload>,\n  success: Reactor<TType, TPayload>,\n  failure: Reactor<TType, TPayload>,\n};\n\ntype RPCReducersType<S, A: ActionType> = {\n  start?: Reducer<S, A>,\n  success?: Reducer<S, A>,\n  failure?: Reducer<S, A>,\n};\n\ntype NormalizedRPCReducersType<S, A: ActionType> = {\n  start: Reducer<S, A>,\n  success: Reducer<S, A>,\n  failure: Reducer<S, A>,\n};\n\nfunction camelUpper(key: string): string {\n  return key.replace(/([A-Z])/g, '_$1').toUpperCase();\n}\n\nconst noopReducer: Reducer<*, *> = state => state;\n\ntype ActionNamesType = {failure: string, start: string, success: string};\ntype ActionTypesType = $Keys<ActionNamesType>;\nconst types: Array<ActionTypesType> = ['start', 'success', 'failure'];\n\nfunction createActionNames(rpcId: string): ActionNamesType {\n  const rpcActionName = camelUpper(rpcId);\n  return types.reduce((names, type) => {\n    names[type] = `${rpcActionName}_${type.toUpperCase()}`;\n    return names;\n  }, {});\n}\n\ntype Action<TType, TPayload> =\n  | {\n      type: TType,\n      payload: TPayload,\n    }\n  | TType;\ntype ConvertToAction = <T>(T) => (payload: any) => Action<T, *>;\ntype RPCActionsType = $ObjMap<ActionNamesType, ConvertToAction>;\nexport function createRPCActions(rpcId: string): RPCActionsType {\n  const actionNames = createActionNames(rpcId);\n  return types.reduce((obj, type) => {\n    obj[type] = (payload: any) => {\n      return {type: actionNames[type], payload};\n    };\n    return obj;\n  }, {});\n}\n\nfunction getNormalizedReducers<S, A: ActionType>(\n  reducers: RPCReducersType<S, A>\n): NormalizedRPCReducersType<S, A> {\n  return types.reduce((obj, type) => {\n    // $FlowFixMe\n    obj[type] = reducers[type] || noopReducer;\n    return obj;\n  }, {});\n}\n\nexport function createRPCReducer<S, A: ActionType>(\n  rpcId: string,\n  reducers: RPCReducersType<S, A>,\n  // $FlowFixMe\n  startValue: S = {}\n): Reducer<S, A> {\n  const actionNames = createActionNames(rpcId);\n  const normalizedReducers = getNormalizedReducers(reducers);\n\n  return function rpcReducer(state: S = startValue, action: A) {\n    if (actionNames.start === action.type) {\n      return normalizedReducers.start(state, action);\n    }\n    if (actionNames.success === action.type) {\n      return normalizedReducers.success(state, action);\n    }\n    if (actionNames.failure === action.type) {\n      return normalizedReducers.failure(state, action);\n    }\n    return state;\n  };\n}\n\n// TODO(#107): Improve flow types with reactors\nexport function createRPCReactors<S, A: ActionType>(\n  rpcId: string,\n  reducers: RPCReducersType<S, A>\n): RPCReactorsType<*, *> {\n  const actionNames = createActionNames(rpcId);\n  const normalizedReducers = getNormalizedReducers(reducers);\n  const reactors = types.reduce((obj, type) => {\n    if (!normalizedReducers[type]) {\n      throw new Error(`Missing reducer for type ${type}`);\n    }\n    const reactor: Reactor<*, *> = createReactor(\n      // $FlowFixMe\n      actionNames[type],\n      normalizedReducers[type]\n    );\n    obj[type] = reactor;\n    return obj;\n  }, {});\n  return reactors;\n}\n\n// FYI 2018-05-10 - Improve type definition for RPCHandlerType\ntype RPCHandlerType = (args: any) => any;\nexport function createRPCHandler({\n  actions,\n  store,\n  rpc,\n  rpcId,\n  mapStateToParams,\n  transformParams,\n}: {\n  actions?: RPCActionsType,\n  store: Store<*, *, *>,\n  rpc: any,\n  rpcId: string,\n  mapStateToParams?: any,\n  transformParams?: any,\n}): RPCHandlerType {\n  if (!actions) {\n    actions = createRPCActions(rpcId);\n  }\n  return (args: any) => {\n    if (mapStateToParams) {\n      args = mapStateToParams(store.getState(), args);\n    }\n    if (transformParams) {\n      args = transformParams(args);\n    }\n    store.dispatch(actions && actions.start(args));\n    return rpc\n      .request(rpcId, args)\n      .then(result => {\n        try {\n          store.dispatch(actions && actions.success(result));\n        } catch (e) {\n          e.__shouldBubble = true;\n          throw e;\n        }\n        return result;\n      })\n      .catch(e => {\n        if (e.__shouldBubble) {\n          delete e.__shouldBubble;\n          throw e;\n        }\n        const error = Object.getOwnPropertyNames(e).reduce((obj, key) => {\n          obj[key] = e[key];\n          return obj;\n        }, {});\n        delete error.stack;\n        error.initialArgs = args;\n        store.dispatch(actions && actions.failure(error));\n        return e;\n      });\n  };\n}\n","/** Copyright (c) 2018 Uber Technologies, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport test from 'tape-cup';\nimport execa from 'execa';\nimport {\n  createRPCHandler,\n  createRPCReactors,\n  createRPCActions,\n  createRPCReducer,\n} from '../index';\n\ntest('Flow tests', async t => {\n  const failurePath = 'src/fixtures/failure';\n  const successPath = 'src/fixtures/success';\n  try {\n    await execa.shell(`flow check ${failurePath}`);\n    t.fail('Should fail flow check');\n  } catch (e) {\n    const {stdout} = e;\n    t.ok(stdout.includes('Found 5 errors'));\n  }\n  await execa.shell(`flow check ${successPath}`);\n  t.end();\n});\n\ntest('api', t => {\n  t.equal(typeof createRPCHandler, 'function', 'exposes a getHandler function');\n  t.equal(\n    typeof createRPCReactors,\n    'function',\n    'exposes a createRPCReactors function'\n  );\n  t.equal(\n    typeof createRPCActions,\n    'function',\n    'exposes a createRPCActions function'\n  );\n  t.equal(\n    typeof createRPCReducer,\n    'function',\n    'exposes a createRPCReducer function'\n  );\n  t.end();\n});\n\ntest('createRPCHandler success', t => {\n  const expectedActions = ['start', 'success'];\n  const handler = createRPCHandler({\n    actions: {\n      start: args => {\n        t.equal(args.transformed, 'transformed-args');\n        t.equal(args.mapped, 'mapped-params');\n        return 'start';\n      },\n      success: result => {\n        t.equal(result, 'test-resolve');\n        return 'success';\n      },\n      failure: () => {\n        t.fail('should not call failure');\n        return 'failure';\n      },\n    },\n    store: {\n      dispatch: action => {\n        t.equal(action, expectedActions.shift());\n      },\n      getState: () => {\n        return 'test-state';\n      },\n      subscribe: () => () => {},\n      replaceReducer: () => {},\n    },\n    rpc: {\n      request: rpcId => {\n        t.equal(rpcId, 'test');\n        return Promise.resolve('test-resolve');\n      },\n    },\n    rpcId: 'test',\n    mapStateToParams: (state, args) => {\n      t.equal(args, 'args');\n      t.equal(state, 'test-state');\n      return {\n        args: args,\n        mapped: 'mapped-params',\n      };\n    },\n    transformParams: params => {\n      t.equal(params.mapped, 'mapped-params');\n      return {\n        mapped: params.mapped,\n        transformed: 'transformed-args',\n      };\n    },\n  });\n  const result = handler('args');\n  t.ok(result instanceof Promise);\n  result.then(resolved => {\n    t.equal(resolved, 'test-resolve');\n    t.end();\n  });\n});\n\ntest('createRPCHandler error in success reducer', t => {\n  const expectedActions = ['start', 'success'];\n  const handler = createRPCHandler({\n    actions: {\n      start: args => {\n        return 'start';\n      },\n      success: result => {\n        throw new Error('Fail');\n      },\n      failure: () => {\n        t.fail('should not call failure');\n        return 'failure';\n      },\n    },\n    store: {\n      dispatch: action => {\n        t.equal(action, expectedActions.shift());\n      },\n      getState: () => {\n        return 'test-state';\n      },\n      subscribe: () => () => {},\n      replaceReducer: () => {},\n    },\n    rpc: {\n      request: rpcId => {\n        return Promise.resolve('test-resolve');\n      },\n    },\n    rpcId: 'test',\n  });\n  handler('args').catch(e => {\n    t.equal(e.message, 'Fail', 'bubbles error with message');\n    t.ok(e.stack, 'bubbles error with stack');\n    t.end();\n  });\n});\n\ntest('createRPCHandler error in start reducer', async t => {\n  const expectedActions = ['start', 'success'];\n  const handler = createRPCHandler({\n    actions: {\n      start: args => {\n        throw new Error('Fail');\n      },\n      success: () => {\n        t.fail('should not call success');\n        return 'success';\n      },\n      failure: () => {\n        t.fail('should not call failure');\n        return 'failure';\n      },\n    },\n    store: {\n      dispatch: action => {\n        t.equal(action, expectedActions.shift());\n      },\n      getState: () => {\n        return 'test-state';\n      },\n      subscribe: () => () => {},\n      replaceReducer: () => {},\n    },\n    rpc: {\n      request: rpcId => {\n        return Promise.resolve('test-resolve');\n      },\n    },\n    rpcId: 'test',\n  });\n  try {\n    await handler('args');\n  } catch (e) {\n    t.equal(e.message, 'Fail', 'bubbles error with message');\n    t.ok(e.stack, 'bubbles error with stack');\n    t.end();\n  }\n});\n\ntest('createRPCHandler error in failure reducer', async t => {\n  const expectedActions = ['start', 'success'];\n  const handler = createRPCHandler({\n    actions: {\n      start: args => {\n        return 'start';\n      },\n      success: () => {\n        t.fail('should not call success');\n        return 'success';\n      },\n      failure: () => {\n        throw new Error('Fail');\n      },\n    },\n    store: {\n      dispatch: action => {\n        t.equal(action, expectedActions.shift());\n      },\n      getState: () => {\n        return 'test-state';\n      },\n      subscribe: () => () => {},\n      replaceReducer: () => {},\n    },\n    rpc: {\n      request: rpcId => {\n        return Promise.reject('test-reject');\n      },\n    },\n    rpcId: 'test',\n  });\n  try {\n    await handler('args');\n  } catch (e) {\n    t.equal(e.message, 'Fail', 'bubbles error with message');\n    t.ok(e.stack, 'bubbles error with stack');\n    t.end();\n  }\n});\n\ntest('createRPCHandler failure', t => {\n  const expectedActions = ['start', 'failure'];\n  const error = new Error('fail');\n  const handler = createRPCHandler({\n    actions: {\n      start: args => {\n        t.equal(args, 'transformed-args');\n        return 'start';\n      },\n      success: () => {\n        t.fail('should not call success');\n        return 'success';\n      },\n      failure: e => {\n        t.equals(e.message, error.message);\n        t.deepEqual(e.initialArgs, 'transformed-args');\n        return 'failure';\n      },\n    },\n    store: {\n      dispatch: action => {\n        t.equal(action, expectedActions.shift());\n      },\n      getState: () => {\n        return 'test-state';\n      },\n      subscribe: () => () => {},\n      replaceReducer: () => {},\n    },\n    rpc: {\n      request: rpcId => {\n        t.equal(rpcId, 'test');\n        return Promise.reject(error);\n      },\n    },\n    rpcId: 'test',\n    mapStateToParams: state => {\n      t.equal(state, 'test-state');\n      return 'mapped-params';\n    },\n    transformParams: params => {\n      t.equal(params, 'mapped-params');\n      return 'transformed-args';\n    },\n  });\n  const result = handler('args');\n  t.ok(result instanceof Promise);\n  result.then(reject => {\n    t.equal(reject, error);\n    t.end();\n  });\n});\n\ntest('createRPCHandler optional parameters', t => {\n  const expectedActions = ['TEST_START', 'TEST_SUCCESS'];\n  const handler = createRPCHandler({\n    store: {\n      dispatch: action => {\n        t.equal(\n          typeof action === 'object' && action.type,\n          expectedActions.shift()\n        );\n      },\n      getState: () => {},\n      subscribe: () => () => {},\n      replaceReducer: () => {},\n    },\n    rpc: {\n      request: rpcId => {\n        t.equal(rpcId, 'test');\n        return Promise.resolve('response');\n      },\n    },\n    rpcId: 'test',\n  });\n  const result = handler('args');\n  t.ok(result instanceof Promise);\n  result.then(response => {\n    t.equal(response, 'response');\n    t.end();\n  });\n});\n\ntest('createRPCReactors', t => {\n  const reactors = createRPCReactors('getCount', {\n    start() {},\n    success() {},\n    failure() {},\n  });\n  t.equal(typeof reactors.start, 'function', 'exposes a start function');\n  t.equal(typeof reactors.success, 'function', 'exposes a success function');\n  t.equal(typeof reactors.failure, 'function', 'exposes a failure function');\n  if (!reactors.start) {\n    t.fail();\n    t.end();\n    return;\n  }\n  const {type, payload} = reactors.start('test-payload');\n  t.equal(type, 'GET_COUNT_START');\n  t.equal(payload, 'test-payload');\n  t.end();\n});\n\ntest('createRPCReactors optional reducers', t => {\n  const reactors = createRPCReactors('getCount', {});\n  t.equal(typeof reactors.start, 'function', 'exposes a start function');\n  t.equal(typeof reactors.success, 'function', 'exposes a success function');\n  t.equal(typeof reactors.failure, 'function', 'exposes a failure function');\n  if (!reactors.start) {\n    t.fail();\n    t.end();\n    return;\n  }\n  const {type, payload} = reactors.start('test-payload');\n  t.equal(type, 'GET_COUNT_START');\n  t.equal(payload, 'test-payload');\n  t.end();\n});\n\ntest('createRPCActions', t => {\n  const {start, success, failure} = createRPCActions('getCount');\n  t.deepLooseEqual(start(5), {type: 'GET_COUNT_START', payload: 5});\n  t.deepLooseEqual(success(5), {type: 'GET_COUNT_SUCCESS', payload: 5});\n  t.deepLooseEqual(failure(5), {type: 'GET_COUNT_FAILURE', payload: 5});\n  t.end();\n});\n\ntest('createRPCReducer', t => {\n  const reducer = createRPCReducer('getCount', {\n    start: (state, action) => {\n      t.equal(state, 'test-state');\n      t.equal(action.type, 'GET_COUNT_START');\n      t.equal(action.payload, 'test-action');\n      // $FlowFixMe\n      return 'test-start';\n    },\n    success: (state, action) => {\n      t.equal(state, 'test-state');\n      t.equal(action.type, 'GET_COUNT_SUCCESS');\n      t.equal(action.payload, 'test-action');\n      // $FlowFixMe\n      return 'test-success';\n    },\n    failure: (state, action) => {\n      t.equal(state, 'test-state');\n      t.equal(action.type, 'GET_COUNT_FAILURE');\n      t.equal(action.payload, 'test-action');\n      // $FlowFixMe\n      return 'test-failure';\n    },\n  });\n\n  t.equal(\n    reducer('test-state', {\n      type: 'GET_COUNT_START',\n      payload: 'test-action',\n    }),\n    'test-start'\n  );\n  t.equal(\n    reducer('test-state', {\n      type: 'GET_COUNT_SUCCESS',\n      payload: 'test-action',\n    }),\n    'test-success'\n  );\n  t.equal(\n    reducer('test-state', {\n      type: 'GET_COUNT_FAILURE',\n      payload: 'test-action',\n    }),\n    'test-failure'\n  );\n  t.equal(reducer('abcd', {type: 'abcd', payload: {}}), 'abcd');\n  t.end();\n});\n\ntest('createRPCReducer default reducers', t => {\n  const reducer = createRPCReducer('getCount', {});\n  const initialState = {a: 'b'};\n  t.equal(\n    reducer(initialState, {type: 'GET_COUNT_START', payload: {}}),\n    initialState\n  );\n  t.equal(\n    reducer(initialState, {type: 'GET_COUNT_SUCCESS', payload: {}}),\n    initialState\n  );\n  t.equal(\n    reducer(initialState, {type: 'GET_COUNT_FAILURE', payload: {}}),\n    initialState\n  );\n  t.end();\n});\n\ntest('createRPCReducer custom default state', t => {\n  const initialState = 123;\n  const reducer = createRPCReducer('getCount', {}, initialState);\n  t.equal(\n    reducer(initialState, {type: 'GET_COUNT_START', payload: {}}),\n    initialState\n  );\n  t.equal(\n    reducer(initialState, {type: 'GET_COUNT_SUCCESS', payload: {}}),\n    initialState\n  );\n  t.equal(\n    reducer(initialState, {type: 'GET_COUNT_FAILURE', payload: {}}),\n    initialState\n  );\n  t.end();\n});\n"],"names":["camelUpper","key","replace","toUpperCase","noopReducer","state","types","createActionNames","rpcId","rpcActionName","reduce","names","type","createRPCActions","actionNames","obj","payload","getNormalizedReducers","reducers","createRPCReducer","startValue","normalizedReducers","rpcReducer","action","start","success","failure","createRPCReactors","reactors","Error","reactor","createReactor","createRPCHandler","actions","store","rpc","mapStateToParams","transformParams","args","getState","dispatch","request","then","result","e","__shouldBubble","catch","error","Object","getOwnPropertyNames","stack","initialArgs","test","t","failurePath","successPath","execa","shell","fail","stdout","ok","includes","end","equal","expectedActions","handler","transformed","mapped","shift","subscribe","replaceReducer","Promise","resolve","params","resolved","message","reject","equals","deepEqual","response","deepLooseEqual","reducer","initialState","a"],"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"}