{"version":3,"file":"node.js","sources":["../src/server.js","../src/index.js","../src/__tests__/exports.js","../src/__tests__/server.node.js"],"sourcesContent":["/** Copyright (c) 2018 Uber Technologies, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\n/* eslint-env node */\nimport {renderToStringWithData} from 'react-apollo';\nimport {renderToString} from 'react-dom/server';\nimport type {Logger} from 'fusion-tokens';\n\nimport type {Element} from 'react';\n\n// Apollo currently does not have an effective error policy for server side rendering (see https://github.com/apollographql/react-apollo/issues/2680)\n// This render function first tries to use `renderToStringWithData`. If any query in this render function fails, we will catch the error, log it, and\n// fall back to a standard renderToString, which will set the `loading` props of all queries which failed to execute in the first pass to true.\n// This allows us to still render with data in the happy case, and defer to client side rendering if any queries fail. This also acts as a form\n// of retrying from the browser.\nexport default (root: Element<*>, logger?: Logger) => {\n  return renderToStringWithData(root)\n    .catch(e => {\n      logger && logger.error('SSR Failed with Error', e);\n      return renderToString(root);\n    })\n    .then(content => {\n      return `<div id='root'>${content}</div>`;\n    });\n};\n","/** Copyright (c) 2018 Uber Technologies, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\n/* eslint-env browser */\nimport React from 'react';\n\nimport CoreApp, {createPlugin, createToken, html, unescape} from 'fusion-core';\nimport type {ApolloClient} from 'apollo-client';\n\nimport {ApolloProvider} from 'react-apollo';\n\nimport {\n  ProviderPlugin,\n  ProvidedHOC,\n  Provider,\n  prepare,\n  middleware,\n} from 'fusion-react';\n\nimport type {Element} from 'react';\nimport type {Context, Token} from 'fusion-core';\n\nimport serverRender from './server';\nimport clientRender from './client';\nimport {LoggerToken} from 'fusion-tokens';\n\nexport type InitApolloClientType<TInitialState> = (\n  ctx: Context,\n  initialState: TInitialState\n) => ApolloClient<TInitialState>;\n\nexport const ApolloClientToken: Token<\n  InitApolloClientType<mixed>\n> = createToken('ApolloClientToken');\n\nexport type ApolloContext<T> = (Context => T) | T;\n\nexport const ApolloContextToken: Token<ApolloContext<mixed>> = createToken(\n  'ApolloContextToken'\n);\n\nexport const GraphQLSchemaToken: Token<string> = createToken(\n  'GraphQlSchemaToken'\n);\n\nexport const ApolloCacheContext = React.createContext<\n  $PropertyType<InitApolloClientType<mixed>, 'cache'>\n>();\n\nexport default class App extends CoreApp {\n  constructor(root: Element<*>, render: ?(Element<*>, ctx: Context) => any) {\n    const renderer = createPlugin({\n      deps: {\n        getApolloClient: ApolloClientToken,\n        logger: LoggerToken.optional,\n      },\n      provides({logger}) {\n        return (el, ctx) => {\n          return prepare(el).then(() => {\n            return render\n              ? render(el, ctx)\n              : __NODE__\n              ? serverRender(el, logger)\n              : clientRender(el);\n          });\n        };\n      },\n      middleware({getApolloClient}) {\n        // This is required to set apollo client/root on context before creating the client.\n        return (ctx, next) => {\n          if (!ctx.element) {\n            return next();\n          }\n\n          // Deserialize initial state for the browser\n          let initialState = null;\n          if (__BROWSER__) {\n            const apolloState = document.getElementById('__APOLLO_STATE__');\n            if (apolloState) {\n              initialState = JSON.parse(unescape(apolloState.textContent));\n            }\n          }\n\n          // Create the client and apollo provider\n          const client = getApolloClient(ctx, initialState);\n          ctx.element = (\n            <ApolloCacheContext.Provider value={client.cache}>\n              <ApolloProvider client={client}>{ctx.element}</ApolloProvider>\n            </ApolloCacheContext.Provider>\n          );\n\n          if (__NODE__) {\n            return middleware(ctx, next).then(() => {\n              const initialState = client.cache && client.cache.extract();\n              const serialized = JSON.stringify(initialState);\n              const script = html`\n                <script type=\"application/json\" id=\"__APOLLO_STATE__\">\n                  ${serialized}\n                </script>\n              `;\n              ctx.template.body.push(script);\n            });\n          } else {\n            return middleware(ctx, next);\n          }\n        };\n      },\n    });\n    super(root, renderer);\n  }\n}\n\nexport {ProviderPlugin, ProvidedHOC, Provider};\n\nexport function gql(path: string): string {\n  throw new Error('fusion-apollo/gql should be replaced at build time');\n}\n","// @flow\n\nimport test from 'tape-cup';\nimport React from 'react';\nimport App, {\n  ApolloClientToken,\n  ApolloContextToken,\n  GraphQLSchemaToken,\n  gql,\n} from '../index.js';\nimport {getSimulator} from 'fusion-test-utils';\n\ntest('fusion-tokens exports', t => {\n  t.ok(ApolloClientToken, 'exports ApolloClientToken');\n  t.ok(ApolloContextToken, 'exports ApolloContextToken');\n  t.ok(GraphQLSchemaToken, 'exports GraphQLSchemaToken');\n  t.ok(App, 'exports App');\n  t.equal(typeof gql, 'function', 'exports a gql function');\n  t.throws(gql, 'gql function throws an error if executed directly');\n  t.end();\n});\n\ntest('App with custom render function', async t => {\n  const app = new App(<div>Hello world</div>, el => {\n    t.ok(el);\n    return 'rendered';\n  });\n  app.register(ApolloClientToken, () => {\n    // $FlowFixMe\n    return {\n      cache: {\n        extract: () => {},\n      },\n    };\n  });\n  const simulator = getSimulator(app);\n  const ctx = await simulator.render('/');\n  t.equal(ctx.rendered, 'rendered', 'custom render function called');\n  t.end();\n});\n","/** Copyright (c) 2018 Uber Technologies, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\n/* eslint-env browser */\n\nimport test from 'tape-cup';\nimport {getSimulator} from 'fusion-test-utils';\nimport React from 'react';\nimport render from '../server';\nimport App, {ApolloClientToken} from '../index';\nimport {ApolloClient} from 'apollo-client';\nimport {InMemoryCache} from 'apollo-cache-inmemory';\nimport {SchemaLink} from 'apollo-link-schema';\nimport gql from 'graphql-tag';\nimport {makeExecutableSchema} from 'graphql-tools';\nimport {Query} from 'react-apollo';\n\ntest('renders', async t => {\n  const rendered = await render(\n    React.createElement('span', null, 'hello'),\n    // $FlowFixMe\n    console\n  );\n  t.ok(/<span/.test(rendered), 'has right tag');\n  t.ok(/hello/.test(rendered), 'has right text');\n  t.end();\n});\n\ntest('Server render simulate', async t => {\n  const el = <div>Hello World</div>;\n  const app = new App(el);\n  const typeDefs = gql`\n    type Query {\n      test: String\n    }\n  `;\n  const resolvers = {\n    Query: {\n      test() {\n        return 'test';\n      },\n    },\n  };\n  const schema = makeExecutableSchema({typeDefs, resolvers});\n  app.register(ApolloClientToken, () => {\n    return new ApolloClient({\n      ssrMode: true,\n      cache: new InMemoryCache().restore({}),\n      link: new SchemaLink({schema}),\n    });\n  });\n  const simulator = getSimulator(app);\n  const ctx = await simulator.render('/');\n  t.equal(ctx.rendered.includes('Hello World'), true, 'renders correctly');\n  t.end();\n});\n\ntest('Server render simulate with custom render function', async t => {\n  const el = <div>Hello World</div>;\n  const app = new App(el, (el, ctx) => {\n    t.ok(el, 'passes in the element');\n    t.ok(ctx, 'passes in the context object');\n    return 'TEST OVERRIDE';\n  });\n  const typeDefs = gql`\n    type Query {\n      test: String\n    }\n  `;\n  const resolvers = {\n    Query: {\n      test() {\n        return 'test';\n      },\n    },\n  };\n  const schema = makeExecutableSchema({typeDefs, resolvers});\n  app.register(ApolloClientToken, () => {\n    return new ApolloClient({\n      ssrMode: true,\n      cache: new InMemoryCache().restore({}),\n      link: new SchemaLink({schema}),\n    });\n  });\n  const simulator = getSimulator(app);\n  const ctx = await simulator.render('/');\n  t.equal(ctx.rendered, 'TEST OVERRIDE', 'renders correctly');\n  t.end();\n});\n\ntest('SSR with <Query>', async t => {\n  const query = gql`\n    query Test {\n      test\n    }\n  `;\n  const el = (\n    <div>\n      <Query query={query}>\n        {result => {\n          if (result.loading) {\n            return <div>Loading...</div>;\n          } else if (result.data) {\n            return <div>{result.data.test}</div>;\n          } else {\n            return <div>Failure</div>;\n          }\n        }}\n      </Query>\n    </div>\n  );\n  const app = new App(el);\n  const typeDefs = gql`\n    type Query {\n      test: String\n    }\n  `;\n  const resolvers = {\n    Query: {\n      test() {\n        return 'test';\n      },\n    },\n  };\n  const schema = makeExecutableSchema({typeDefs, resolvers});\n  app.register(ApolloClientToken, () => {\n    return new ApolloClient({\n      ssrMode: true,\n      cache: new InMemoryCache().restore({}),\n      link: new SchemaLink({schema}),\n    });\n  });\n  const simulator = getSimulator(app);\n  const ctx = await simulator.render('/');\n  t.equal(ctx.rendered.includes('test'), true, 'renders correctly');\n  t.equal(ctx.rendered.includes('Loading'), false, 'does not render loading');\n  t.end();\n});\n\ntest('SSR with <Query> and errors', async t => {\n  const query = gql`\n    query Test {\n      test\n    }\n  `;\n  const el = (\n    <div>\n      <Query query={query}>\n        {result => {\n          if (result.loading) {\n            return <div>Loading...</div>;\n          } else if (result.data) {\n            return <div>{result.data.test}</div>;\n          } else {\n            return <div>Failure</div>;\n          }\n        }}\n      </Query>\n    </div>\n  );\n  const app = new App(el);\n  const typeDefs = gql`\n    type Query {\n      test: String\n    }\n  `;\n  const resolvers = {\n    Query: {\n      test() {\n        throw new Error('FAIL');\n      },\n    },\n  };\n  const schema = makeExecutableSchema({typeDefs, resolvers});\n  app.register(ApolloClientToken, () => {\n    return new ApolloClient({\n      ssrMode: true,\n      cache: new InMemoryCache().restore({}),\n      link: new SchemaLink({schema}),\n    });\n  });\n  const simulator = getSimulator(app);\n  const ctx = await simulator.render('/');\n  t.equal(ctx.rendered.includes('test'), false, 'does not fetch data');\n  t.equal(ctx.rendered.includes('Loading'), true, 'Renders the loading');\n  t.end();\n});\n"],"names":["root","logger","renderToStringWithData","catch","e","error","renderToString","then","content","ApolloClientToken","createToken","ApolloContextToken","GraphQLSchemaToken","ApolloCacheContext","React","createContext","App","CoreApp","constructor","render","renderer","createPlugin","deps","getApolloClient","LoggerToken","optional","provides","el","ctx","prepare","serverRender","middleware","next","element","initialState","client","cache","ApolloProvider","extract","serialized","JSON","stringify","script","html","template","body","push","gql","path","Error","test","t","ok","equal","throws","end","app","register","simulator","getSimulator","rendered","createElement","console","typeDefs","resolvers","Query","schema","makeExecutableSchema","ApolloClient","ssrMode","InMemoryCache","restore","link","SchemaLink","includes","query","result","loading","data"],"mappings":"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"}