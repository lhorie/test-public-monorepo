{"version":3,"file":"node.js","sources":["../src/tokens.js","../src/server.js","../src/__tests__/index.node.js"],"sourcesContent":["/** Copyright (c) 2018 Uber Technologies, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport {createToken} from 'fusion-core';\nimport type {Token} from 'fusion-core';\n\nexport type Timers = {\n  setInterval: (Function, number) => number,\n  clearInterval: number => void,\n};\n\nexport const NodePerformanceEmitterToken: Token<any> = createToken(\n  'NodePerformanceEmitterToken'\n);\n\nexport const TimersToken: Token<Timers> = createToken('TimersToken');\n\nexport const EventLoopLagIntervalToken: Token<number> = createToken(\n  'EventLoopLagIntervalToken'\n);\nexport const MemoryIntervalToken: Token<number> = createToken(\n  'MemoryIntervalToken'\n);\nexport const SocketIntervalToken: Token<number> = createToken(\n  'SocketIntervalToken'\n);\n","/** Copyright (c) 2018 Uber Technologies, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\n/* eslint-env node */\n\n/* Configuration Tokens */\n// $FlowFixMe flow should be aware of native timers module\nimport nodeTimers from 'timers';\nimport gcStats from 'gc-stats';\n// $FlowFixMe flow should be aware of http.globalAgent property\nimport {globalAgent} from 'http';\nimport assert from 'assert';\n\nimport {createPlugin} from 'fusion-core';\nimport {UniversalEventsToken} from 'fusion-plugin-universal-events';\n\nimport type {FusionPlugin} from 'fusion-core';\nimport type {NodePerformanceDepsType as Deps} from './flow.js';\n\nimport {\n  TimersToken,\n  EventLoopLagIntervalToken,\n  MemoryIntervalToken,\n  SocketIntervalToken,\n} from './tokens';\nimport type {Timers} from './tokens';\n\nconst CONFIG_DEFAULTS = {\n  eventLoopLagInterval: 1000 * 10,\n  memoryInterval: 1000 * 10,\n  socketInterval: 1000 * 10,\n};\n\n/* Helper Functions */\nfunction getCountFromGlobalAgent(data: Object) {\n  let numUnassigned = 0;\n  const domains = Object.keys(data);\n  for (let x = 0; x < domains.length; x++) {\n    const domain = data[domains[x]];\n    if (domain && domain.length) {\n      numUnassigned += domain.length;\n    }\n  }\n  return numUnassigned;\n}\n\nfunction eventLoopLag(cb: Function) {\n  const time = process.hrtime();\n  setImmediate(function nextLoop() {\n    const diff = process.hrtime(time);\n    return cb(diff[0] * 1e9 + diff[1]);\n  });\n}\n\nfunction noop() {}\n\n/* Service */\nclass NodePerformanceEmitter {\n  gc: any;\n  eventLoopLagInterval: number;\n  memoryInterval: number;\n  socketInterval: number;\n  emit: (string, any) => void;\n  timers: Timers;\n  socketUsageIntervalRef: number;\n  eventLoopLagIntervalRef: number;\n  memoryIntervalRef: number;\n  isTrackingGarbageCollection: boolean;\n\n  constructor(config, emit, timers) {\n    assert.ok(config, 'config provided, as expected');\n    assert.ok(emit, 'emit provided, as expected');\n    assert.ok(timers, 'timers provided, as expected');\n\n    this.gc = gcStats();\n\n    this.eventLoopLagInterval = config.eventLoopLagInterval;\n    this.memoryInterval = config.memoryInterval;\n    this.socketInterval = config.socketInterval;\n\n    this.emit = emit;\n\n    this.timers = timers;\n\n    // Track running timers\n    this.socketUsageIntervalRef = 0;\n    this.eventLoopLagIntervalRef = 0;\n    this.memoryIntervalRef = 0;\n    this.isTrackingGarbageCollection = false;\n  }\n\n  /* PRODUCTIVITY API */\n  start() {\n    this.startTrackingEventLoopLag();\n    this.startTrackingMemoryUsage();\n    this.startTrackingGCUsage();\n    this.startTrackingSocketUsage();\n  }\n\n  stop() {\n    this.stopTrackingEventLoopLag();\n    this.stopTrackingMemoryUsage();\n    this.stopTrackingGCUsage();\n    this.stopTrackingSocketUsage();\n  }\n\n  /* POWER API */\n  /* Tracking Lag */\n  startTrackingEventLoopLag() {\n    if (this.eventLoopLagIntervalRef)\n      throw new Error(\n        'Event Loop Lag is already being tracked.  Please stop previous instance before beginning a new one.'\n      );\n\n    this.eventLoopLagIntervalRef = this.timers.setInterval(\n      this.emitEventLoopLag.bind(this),\n      this.eventLoopLagInterval\n    );\n  }\n\n  stopTrackingEventLoopLag() {\n    this.timers.clearInterval(this.eventLoopLagIntervalRef);\n    this.eventLoopLagIntervalRef = 0;\n  }\n\n  emitEventLoopLag(done: Function) {\n    done = done || noop;\n    eventLoopLag((lag: number) => {\n      this.emit('gauge:event_loop_lag', lag);\n      return done();\n    });\n  }\n\n  /* Tracking Memory Usage */\n  startTrackingMemoryUsage() {\n    if (this.memoryIntervalRef)\n      throw new Error(\n        'Memory Usage is already being tracked.  Please stop previous instance before beginning a new one.'\n      );\n\n    this.memoryIntervalRef = this.timers.setInterval(\n      this.emitMemoryUsage.bind(this),\n      this.memoryInterval\n    );\n  }\n\n  stopTrackingMemoryUsage() {\n    this.timers.clearInterval(this.memoryIntervalRef);\n    this.memoryIntervalRef = 0;\n  }\n\n  emitMemoryUsage() {\n    const memoryUsage = process.memoryUsage();\n    // $FlowFixMe .external should be present in typedef of process.memoryUsage()\n    this.emit('gauge:externalMemory', memoryUsage.external);\n    this.emit('gauge:rss', memoryUsage.rss);\n    this.emit('gauge:heapTotal', memoryUsage.heapTotal);\n    this.emit('gauge:heapUsed', memoryUsage.heapUsed);\n  }\n\n  /* Tracking Garbage Collection */\n  startTrackingGCUsage() {\n    if (this.isTrackingGarbageCollection)\n      throw new Error(\n        'Garbage Collection is already being tracked.  Please stop previous instance before beginning a new one.'\n      );\n\n    this.gc.on('stats', stats => {\n      this.emit('timing:gc', {\n        duration: stats.pauseMS,\n        type: stats.gctype,\n      });\n    });\n  }\n\n  stopTrackingGCUsage() {\n    this.gc.removeAllListeners('stats');\n    this.isTrackingGarbageCollection = false;\n  }\n\n  /* Tracking Socket Usage */\n  startTrackingSocketUsage() {\n    if (this.socketUsageIntervalRef)\n      throw new Error(\n        'Socket Usage is already being tracked.  Please stop previous instance before beginning a new one.'\n      );\n\n    this.socketUsageIntervalRef = this.timers.setInterval(\n      this.emitSocketUsage.bind(this),\n      this.socketInterval\n    );\n  }\n\n  stopTrackingSocketUsage() {\n    this.timers.clearInterval(this.socketUsageIntervalRef);\n    this.socketUsageIntervalRef = 0;\n  }\n\n  emitSocketUsage() {\n    // number of sockets currently in use\n    this.emit(\n      'gauge:globalAgentSockets',\n      getCountFromGlobalAgent(globalAgent.sockets)\n    );\n    // number of requests that have not yet been assigned to sockets\n    this.emit(\n      'gauge:globalAgentRequests',\n      getCountFromGlobalAgent(globalAgent.requests)\n    );\n    // number of free sockets\n    this.emit(\n      'gauge:globalAgentFreeSockets',\n      getCountFromGlobalAgent(globalAgent.freeSockets)\n    );\n  }\n}\n\n/* Plugin */\nconst plugin =\n  __NODE__ &&\n  createPlugin({\n    deps: {\n      emitter: UniversalEventsToken,\n      timers: TimersToken.optional,\n\n      /* Config */\n      eventLoopLagInterval: EventLoopLagIntervalToken.optional,\n      memoryInterval: MemoryIntervalToken.optional,\n      socketInterval: SocketIntervalToken.optional,\n    },\n    provides: ({\n      emitter,\n      timers = nodeTimers,\n      eventLoopLagInterval = CONFIG_DEFAULTS.eventLoopLagInterval,\n      memoryInterval = CONFIG_DEFAULTS.memoryInterval,\n      socketInterval = CONFIG_DEFAULTS.socketInterval,\n    }) => {\n      const config = {\n        eventLoopLagInterval: eventLoopLagInterval,\n        memoryInterval: memoryInterval,\n        socketInterval: socketInterval,\n      };\n      const emit = (header, payload) => {\n        emitter.emit(`node-performance-emitter:${header}`, payload);\n      };\n\n      const service = new NodePerformanceEmitter(config, emit, timers);\n      service.start();\n\n      return service;\n    },\n    cleanup: async service => service.stop(),\n  });\n\nexport default ((plugin: any): FusionPlugin<Deps, NodePerformanceEmitter>);\n","/** Copyright (c) 2018 Uber Technologies, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\n/* eslint-env node */\nimport test from 'tape-cup';\nimport MockEmitter from 'events';\n\nimport App, {createPlugin} from 'fusion-core';\nimport {getSimulator, getService} from 'fusion-test-utils';\nimport {UniversalEventsToken} from 'fusion-plugin-universal-events';\n\nimport {\n  NodePerformanceEmitterToken,\n  TimersToken,\n  EventLoopLagIntervalToken,\n  MemoryIntervalToken,\n  SocketIntervalToken,\n} from '../tokens';\nimport NodePerformanceEmitterPlugin from '../server';\n\n/* Constants */\nconst EVENT_PLUGIN_NAME = 'node-performance-emitter';\n\n/* Mocks */\nconst mockConfig = {\n  eventLoopLagInterval: 1,\n  memoryInterval: 10,\n  socketInterval: 100,\n};\n\nconst mockEmitterFactory = () => {\n  const mockEmitter = new MockEmitter();\n  // $FlowFixMe\n  mockEmitter.from = () => mockEmitter;\n  return (mockEmitter: any);\n};\n\nconst mockTimersFactory = t => {\n  let _numSetInterval = 0;\n  return {\n    _getNumSetInterval: () => _numSetInterval,\n    setInterval: (fn, timeout) => {\n      if (t) {\n        t.equals(typeof fn, 'function', 'passes a function into setInterval');\n        t.equals(typeof timeout, 'number', 'passes a number into setInterval');\n      }\n      fn();\n      _numSetInterval++;\n      return 5;\n    },\n    clearInterval: function mockClearInterval(intervalId) {\n      _numSetInterval--;\n      if (t) {\n        t.equals(intervalId, 5, 'clears the interval correctly');\n      }\n    },\n  };\n};\n\n/* Fixtures */\nfunction createTestFixture() {\n  const mockTimers = mockTimersFactory();\n  const mockEmitterPlugin = createPlugin({\n    provides: () => mockEmitterFactory(),\n  });\n\n  const app = new App('content', el => el);\n  app.register(NodePerformanceEmitterToken, NodePerformanceEmitterPlugin);\n  app.register(TimersToken, mockTimers);\n  app.register(UniversalEventsToken, mockEmitterPlugin);\n  return app;\n}\n\nfunction registerMockConfig(app) {\n  app.register(EventLoopLagIntervalToken, mockConfig.eventLoopLagInterval);\n  app.register(MemoryIntervalToken, mockConfig.memoryInterval);\n  app.register(SocketIntervalToken, mockConfig.socketInterval);\n}\n\n/* Tests */\ntest('FusionApp - service resolved', t => {\n  const app = createTestFixture();\n\n  let wasResolved = false;\n  getSimulator(\n    app,\n    createPlugin({\n      deps: {perfEmitter: NodePerformanceEmitterToken},\n      provides: ({perfEmitter}) => {\n        t.ok(perfEmitter);\n        wasResolved = true;\n      },\n    })\n  );\n  t.true(wasResolved, 'service was resolved');\n\n  t.end();\n});\n\ntest('service - cannot track the same types more than once at a time', t => {\n  const perfService = getService(\n    createTestFixture,\n    NodePerformanceEmitterPlugin\n  );\n\n  t.throws(() => perfService.start(), 'already running trackers cannot start');\n\n  // Able to start now that we've stopped\n  t.doesNotThrow(() => perfService.stop(), 'service can be stopped');\n  t.doesNotThrow(\n    () => perfService.start(),\n    'service can run if the trackers are not active'\n  );\n\n  t.doesNotThrow(() => perfService.stop(), 'service can be stopped');\n  t.doesNotThrow(\n    () => perfService.stop(),\n    'stopped service can remain stopped'\n  );\n\n  t.end();\n});\n\ntest('service - tracking number of timer intervals set', t => {\n  const mockTimers = mockTimersFactory(t);\n  const appCreator = () => {\n    const app = new App('content', el => el);\n    app.register(TimersToken, mockTimers);\n    app.register(UniversalEventsToken, mockEmitterFactory());\n    registerMockConfig(app);\n    return app;\n  };\n  const perfService = getService(appCreator, NodePerformanceEmitterPlugin);\n\n  t.assert(\n    mockTimers._getNumSetInterval() === 3,\n    'socket usage, event loop, and memory intervals should be set'\n  );\n  perfService.stop();\n  t.assert(\n    mockTimers._getNumSetInterval() === 0,\n    'when stopped, no timer intervals should be set'\n  );\n\n  t.end();\n});\n\ntest('service - tracking emit messages', t => {\n  const mockEmitter = mockEmitterFactory();\n  const mockTimers = mockTimersFactory();\n  const appCreator = () => {\n    const app = new App('content', el => el);\n    app.register(TimersToken, mockTimers);\n    app.register(UniversalEventsToken, mockEmitter);\n    registerMockConfig(app);\n    return app;\n  };\n\n  // Register to listen to emits\n  let emitNumberTracker = 0;\n  mockEmitter.on(`${EVENT_PLUGIN_NAME}:gauge:event_loop_lag`, payload => {\n    emitNumberTracker++;\n    t.assert(payload !== undefined, 'event_loop_lag: message received');\n  });\n  mockEmitter.on(`${EVENT_PLUGIN_NAME}:gauge:rss`, payload => {\n    emitNumberTracker++;\n    t.assert(payload !== undefined, 'rss: message received');\n  });\n  mockEmitter.on(`${EVENT_PLUGIN_NAME}:gauge:externalMemory`, payload => {\n    emitNumberTracker++;\n    t.assert(payload !== undefined, 'externalMemory: message received');\n  });\n  mockEmitter.on(`${EVENT_PLUGIN_NAME}:gauge:heapTotal`, payload => {\n    emitNumberTracker++;\n    t.assert(payload !== undefined, 'heapTotal: message received');\n  });\n  mockEmitter.on(`${EVENT_PLUGIN_NAME}:gauge:heapUsed`, payload => {\n    emitNumberTracker++;\n    t.assert(payload !== undefined, 'heapUsed: message received');\n  });\n  mockEmitter.on(`${EVENT_PLUGIN_NAME}:gauge:globalAgentSockets`, payload => {\n    emitNumberTracker++;\n    t.assert(payload !== undefined, 'globalAgentSockets: message received');\n  });\n  mockEmitter.on(`${EVENT_PLUGIN_NAME}:gauge:globalAgentRequests`, payload => {\n    emitNumberTracker++;\n    t.assert(payload !== undefined, 'globalAgentRequests: message received');\n  });\n  mockEmitter.on(\n    `${EVENT_PLUGIN_NAME}:gauge:globalAgentFreeSockets`,\n    payload => {\n      emitNumberTracker++;\n      t.assert(\n        payload !== undefined,\n        'globalAgentFreeSockets: message received'\n      );\n    }\n  );\n\n  const perfService = getService(appCreator, NodePerformanceEmitterPlugin);\n\n  perfService.stop();\n\n  setImmediate(() => {\n    t.assert(emitNumberTracker === 8, 'all emits should be captured');\n    t.end();\n  });\n});\n\ntest('service - testing garbage collection emits', t => {\n  const mockEmitter = mockEmitterFactory();\n  const mockTimers = mockTimersFactory();\n  const appCreator = () => {\n    const app = new App('content', el => el);\n    app.register(TimersToken, mockTimers);\n    app.register(UniversalEventsToken, mockEmitter);\n    registerMockConfig(app);\n    return app;\n  };\n\n  // Register to listen to emits\n  let gcMessageReceived = false;\n  let totalDuration = 0;\n  mockEmitter.on(`${EVENT_PLUGIN_NAME}:timing:gc`, args => {\n    totalDuration += args.duration;\n    gcMessageReceived = true;\n  });\n\n  const perfService = getService(appCreator, NodePerformanceEmitterPlugin);\n  perfService.startTrackingGCUsage();\n\n  // Make some garbage!\n  var myTracker = [];\n  for (var i = 0; i < 1000000; i++) {\n    myTracker.push({lotsof: 'garbage'});\n  }\n  myTracker = [];\n\n  setTimeout(() => {\n    perfService.stopTrackingGCUsage();\n    t.assert(gcMessageReceived, 'gc: message was received');\n    t.assert(totalDuration > 0, 'gc: total duration is greater than 0');\n    t.end();\n  }, 100);\n});\n"],"names":["NodePerformanceEmitterToken","createToken","TimersToken","EventLoopLagIntervalToken","MemoryIntervalToken","SocketIntervalToken","CONFIG_DEFAULTS","eventLoopLagInterval","memoryInterval","socketInterval","getCountFromGlobalAgent","data","numUnassigned","domains","Object","keys","x","length","domain","eventLoopLag","cb","time","process","hrtime","setImmediate","nextLoop","diff","noop","NodePerformanceEmitter","constructor","config","emit","timers","assert","ok","gc","gcStats","socketUsageIntervalRef","eventLoopLagIntervalRef","memoryIntervalRef","isTrackingGarbageCollection","start","startTrackingEventLoopLag","startTrackingMemoryUsage","startTrackingGCUsage","startTrackingSocketUsage","stop","stopTrackingEventLoopLag","stopTrackingMemoryUsage","stopTrackingGCUsage","stopTrackingSocketUsage","Error","setInterval","emitEventLoopLag","bind","clearInterval","done","lag","emitMemoryUsage","memoryUsage","external","rss","heapTotal","heapUsed","on","stats","duration","pauseMS","type","gctype","removeAllListeners","emitSocketUsage","globalAgent","sockets","requests","freeSockets","plugin","createPlugin","deps","emitter","UniversalEventsToken","optional","provides","nodeTimers","header","payload","service","cleanup","EVENT_PLUGIN_NAME","mockConfig","mockEmitterFactory","mockEmitter","MockEmitter","from","mockTimersFactory","t","_numSetInterval","_getNumSetInterval","fn","timeout","equals","mockClearInterval","intervalId","createTestFixture","mockTimers","mockEmitterPlugin","app","App","el","register","NodePerformanceEmitterPlugin","registerMockConfig","test","wasResolved","getSimulator","perfEmitter","true","end","perfService","getService","throws","doesNotThrow","appCreator","emitNumberTracker","undefined","gcMessageReceived","totalDuration","args","myTracker","i","push","lotsof","setTimeout"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAQA,AAQO,MAAMA,2BAAuC,0BAAGC,eAAW,CAChE,6BADgE,CAAd,CAA7C;AAIP,AAAO,MAAMC,WAA0B,0BAAGD,eAAW,CAAC,aAAD,CAAd,CAAhC;AAEP,AAAO,MAAME,yBAAwC,0BAAGF,eAAW,CACjE,2BADiE,CAAd,CAA9C;AAGP,AAAO,MAAMG,mBAAkC,0BAAGH,eAAW,CAC3D,qBAD2D,CAAd,CAAxC;AAGP,AAAO,MAAMI,mBAAkC,0BAAGJ,eAAW,CAC3D,qBAD2D,CAAd,CAAxC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AChBP,AAoBA,MAAMK,eAAe,0BAAG;EACtBC,oBAAoB,EAAE,OAAO,EADP;EAEtBC,cAAc,EAAE,OAAO,EAFD;EAGtBC,cAAc,EAAE,OAAO;CAHJ,CAArB;;;AAOA,SAASC,uBAAT,CAAiCC,IAAjC,EAA+C;;MACzCC,aAAa,0BAAG,CAAH,CAAjB;QACMC,OAAO,0BAAGC,MAAM,CAACC,IAAP,CAAYJ,IAAZ,CAAH,CAAb;;;OACK,IAAIK,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,OAAO,CAACI,MAA5B,EAAoCD,CAAC,EAArC,EAAyC;UACjCE,MAAM,0BAAGP,IAAI,CAACE,OAAO,CAACG,CAAD,CAAR,CAAP,CAAZ;;;QACI,0BAAAE,MAAM,+BAAIA,MAAM,CAACD,MAAX,CAAV,EAA6B;;;MAC3BL,aAAa,IAAIM,MAAM,CAACD,MAAxB;KADF;;;;;;SAIKL,aAAP;;;AAGF,SAASO,YAAT,CAAsBC,EAAtB,EAAoC;;QAC5BC,IAAI,0BAAGC,OAAO,CAACC,MAAR,EAAH,CAAV;;EACAC,YAAY,CAAC,SAASC,QAAT,GAAoB;;UACzBC,IAAI,2BAAGJ,OAAO,CAACC,MAAR,CAAeF,IAAf,CAAH,CAAV;;WACOD,EAAE,CAACM,IAAI,CAAC,CAAD,CAAJ,GAAU,GAAV,GAAgBA,IAAI,CAAC,CAAD,CAArB,CAAT;GAFU,CAAZ;;;AAMF,SAASC,IAAT,GAAgB;;;;;;AAGhB,MAAMC,sBAAN,CAA6B;EAY3BC,WAAW,CAACC,MAAD,EAASC,IAAT,EAAeC,MAAf,EAAuB;;;IAChCC,MAAM,CAACC,EAAP,CAAUJ,MAAV,EAAkB,8BAAlB;;IACAG,MAAM,CAACC,EAAP,CAAUH,IAAV,EAAgB,4BAAhB;;IACAE,MAAM,CAACC,EAAP,CAAUF,MAAV,EAAkB,8BAAlB;;SAEKG,EAAL,GAAUC,OAAO,EAAjB;;SAEK7B,oBAAL,GAA4BuB,MAAM,CAACvB,oBAAnC;;SACKC,cAAL,GAAsBsB,MAAM,CAACtB,cAA7B;;SACKC,cAAL,GAAsBqB,MAAM,CAACrB,cAA7B;;SAEKsB,IAAL,GAAYA,IAAZ;;SAEKC,MAAL,GAAcA,MAAd,CAbgC;;;SAgB3BK,sBAAL,GAA8B,CAA9B;;SACKC,uBAAL,GAA+B,CAA/B;;SACKC,iBAAL,GAAyB,CAAzB;;SACKC,2BAAL,GAAmC,KAAnC;;;;;EAIFC,KAAK,GAAG;;;SACDC,yBAAL;;SACKC,wBAAL;;SACKC,oBAAL;;SACKC,wBAAL;;;EAGFC,IAAI,GAAG;;;SACAC,wBAAL;;SACKC,uBAAL;;SACKC,mBAAL;;SACKC,uBAAL;;;;;;;EAKFR,yBAAyB,GAAG;;;;QACtB,KAAKJ,uBAAT,EACE;;;YAAM,IAAIa,KAAJ,CACJ,qGADI,CAAN;KADF;;;;;SAKKb,uBAAL,GAA+B,KAAKN,MAAL,CAAYoB,WAAZ,CAC7B,KAAKC,gBAAL,CAAsBC,IAAtB,CAA2B,IAA3B,CAD6B,EAE7B,KAAK/C,oBAFwB,CAA/B;;;EAMFwC,wBAAwB,GAAG;;;SACpBf,MAAL,CAAYuB,aAAZ,CAA0B,KAAKjB,uBAA/B;;SACKA,uBAAL,GAA+B,CAA/B;;;EAGFe,gBAAgB,CAACG,IAAD,EAAiB;;;IAC/BA,IAAI,GAAG,0BAAAA,IAAI,+BAAI7B,IAAJ,CAAX;;IACAR,YAAY,CAAEsC,GAAD,IAAiB;;;WACvB1B,IAAL,CAAU,sBAAV,EAAkC0B,GAAlC;;aACOD,IAAI,EAAX;KAFU,CAAZ;;;;;EAOFb,wBAAwB,GAAG;;;;QACrB,KAAKJ,iBAAT,EACE;;;YAAM,IAAIY,KAAJ,CACJ,mGADI,CAAN;KADF;;;;;SAKKZ,iBAAL,GAAyB,KAAKP,MAAL,CAAYoB,WAAZ,CACvB,KAAKM,eAAL,CAAqBJ,IAArB,CAA0B,IAA1B,CADuB,EAEvB,KAAK9C,cAFkB,CAAzB;;;EAMFwC,uBAAuB,GAAG;;;SACnBhB,MAAL,CAAYuB,aAAZ,CAA0B,KAAKhB,iBAA/B;;SACKA,iBAAL,GAAyB,CAAzB;;;EAGFmB,eAAe,GAAG;;UACVC,WAAW,2BAAGrC,OAAO,CAACqC,WAAR,EAAH,CAAjB,CADgB;;;SAGX5B,IAAL,CAAU,sBAAV,EAAkC4B,WAAW,CAACC,QAA9C;;SACK7B,IAAL,CAAU,WAAV,EAAuB4B,WAAW,CAACE,GAAnC;;SACK9B,IAAL,CAAU,iBAAV,EAA6B4B,WAAW,CAACG,SAAzC;;SACK/B,IAAL,CAAU,gBAAV,EAA4B4B,WAAW,CAACI,QAAxC;;;;;EAIFnB,oBAAoB,GAAG;;;;QACjB,KAAKJ,2BAAT,EACE;;;YAAM,IAAIW,KAAJ,CACJ,yGADI,CAAN;KADF;;;;;SAKKhB,EAAL,CAAQ6B,EAAR,CAAW,OAAX,EAAoBC,KAAK,IAAI;;;WACtBlC,IAAL,CAAU,WAAV,EAAuB;QACrBmC,QAAQ,EAAED,KAAK,CAACE,OADK;QAErBC,IAAI,EAAEH,KAAK,CAACI;OAFd;KADF;;;EAQFpB,mBAAmB,GAAG;;;SACfd,EAAL,CAAQmC,kBAAR,CAA2B,OAA3B;;SACK9B,2BAAL,GAAmC,KAAnC;;;;;EAIFK,wBAAwB,GAAG;;;;QACrB,KAAKR,sBAAT,EACE;;;YAAM,IAAIc,KAAJ,CACJ,mGADI,CAAN;KADF;;;;;SAKKd,sBAAL,GAA8B,KAAKL,MAAL,CAAYoB,WAAZ,CAC5B,KAAKmB,eAAL,CAAqBjB,IAArB,CAA0B,IAA1B,CAD4B,EAE5B,KAAK7C,cAFuB,CAA9B;;;EAMFyC,uBAAuB,GAAG;;;SACnBlB,MAAL,CAAYuB,aAAZ,CAA0B,KAAKlB,sBAA/B;;SACKA,sBAAL,GAA8B,CAA9B;;;EAGFkC,eAAe,GAAG;;;;SAEXxC,IAAL,CACE,0BADF,EAEErB,uBAAuB,CAAC8D,gBAAW,CAACC,OAAb,CAFzB,EAFgB;;;SAOX1C,IAAL,CACE,2BADF,EAEErB,uBAAuB,CAAC8D,gBAAW,CAACE,QAAb,CAFzB,EAPgB;;;SAYX3C,IAAL,CACE,8BADF,EAEErB,uBAAuB,CAAC8D,gBAAW,CAACG,WAAb,CAFzB;;;;;;;AAQJ,MAAMC,MAAM,2BACV,6DACAC,gBAAY,CAAC;EACXC,IAAI,EAAE;IACJC,OAAO,EAAEC,gDADL;IAEJhD,MAAM,EAAE9B,WAAW,CAAC+E,QAFhB;;;IAKJ1E,oBAAoB,EAAEJ,yBAAyB,CAAC8E,QAL5C;IAMJzE,cAAc,EAAEJ,mBAAmB,CAAC6E,QANhC;IAOJxE,cAAc,EAAEJ,mBAAmB,CAAC4E;GAR3B;EAUXC,QAAQ,EAAE,CAAC;IACTH,OADS;IAET/C,MAAM,6BAAGmD,UAAH,CAFG;IAGT5E,oBAAoB,6BAAGD,eAAe,CAACC,oBAAnB,CAHX;IAITC,cAAc,8BAAGF,eAAe,CAACE,cAAnB,CAJL;IAKTC,cAAc,8BAAGH,eAAe,CAACG,cAAnB;GALN,KAMJ;;UACEqB,MAAM,2BAAG;MACbvB,oBAAoB,EAAEA,oBADT;MAEbC,cAAc,EAAEA,cAFH;MAGbC,cAAc,EAAEA;KAHN,CAAZ;;;UAKMsB,IAAI,GAAG,CAACqD,MAAD,EAASC,OAAT,KAAqB;;;MAChCN,OAAO,CAAChD,IAAR,CAAc,4BAA2BqD,MAAO,EAAhD,EAAmDC,OAAnD;KADF;;UAIMC,OAAO,2BAAG,IAAI1D,sBAAJ,CAA2BE,MAA3B,EAAmCC,IAAnC,EAAyCC,MAAzC,CAAH,CAAb;;IACAsD,OAAO,CAAC7C,KAAR;;WAEO6C,OAAP;GA7BS;EA+BXC,OAAO,EAAE,MAAMD,OAAN,IAAiB;;;WAAAA,OAAO,CAACxC,IAAR;;CA/BhB,CADZ,CADU,CAAZ;;AC/NA;;;;;;;;;AASA,AAgBA;;AACA,MAAM0C,iBAAiB,GAAG,0BAA1B;;;AAGA,MAAMC,UAAU,GAAG;EACjBlF,oBAAoB,EAAE,CADL;EAEjBC,cAAc,EAAE,EAFC;EAGjBC,cAAc,EAAE;CAHlB;;AAMA,MAAMiF,kBAAkB,GAAG,MAAM;QACzBC,WAAW,GAAG,IAAIC,WAAJ,EAApB,CAD+B;;EAG/BD,WAAW,CAACE,IAAZ,GAAmB,MAAMF,WAAzB;;SACQA,WAAR;CAJF;;AAOA,MAAMG,iBAAiB,GAAGC,CAAC,IAAI;MACzBC,eAAe,GAAG,CAAtB;SACO;IACLC,kBAAkB,EAAE,MAAMD,eADrB;IAEL5C,WAAW,EAAE,CAAC8C,EAAD,EAAKC,OAAL,KAAiB;UACxBJ,CAAJ,EAAO;QACLA,CAAC,CAACK,MAAF,CAAS,OAAOF,EAAhB,EAAoB,UAApB,EAAgC,oCAAhC;QACAH,CAAC,CAACK,MAAF,CAAS,OAAOD,OAAhB,EAAyB,QAAzB,EAAmC,kCAAnC;;;MAEFD,EAAE;MACFF,eAAe;aACR,CAAP;KATG;IAWLzC,aAAa,EAAE,SAAS8C,iBAAT,CAA2BC,UAA3B,EAAuC;MACpDN,eAAe;;UACXD,CAAJ,EAAO;QACLA,CAAC,CAACK,MAAF,CAASE,UAAT,EAAqB,CAArB,EAAwB,+BAAxB;;;GAdN;CAFF;;;;AAuBA,SAASC,iBAAT,GAA6B;QACrBC,UAAU,GAAGV,iBAAiB,EAApC;QACMW,iBAAiB,GAAG5B,gBAAY,CAAC;IACrCK,QAAQ,EAAE,MAAMQ,kBAAkB;GADE,CAAtC;QAIMgB,GAAG,GAAG,IAAIC,YAAJ,CAAQ,SAAR,EAAmBC,EAAE,IAAIA,EAAzB,CAAZ;EACAF,GAAG,CAACG,QAAJ,CAAa7G,2BAAb,EAA0C8G,MAA1C;EACAJ,GAAG,CAACG,QAAJ,CAAa3G,WAAb,EAA0BsG,UAA1B;EACAE,GAAG,CAACG,QAAJ,CAAa7B,gDAAb,EAAmCyB,iBAAnC;SACOC,GAAP;;;AAGF,SAASK,kBAAT,CAA4BL,GAA5B,EAAiC;EAC/BA,GAAG,CAACG,QAAJ,CAAa1G,yBAAb,EAAwCsF,UAAU,CAAClF,oBAAnD;EACAmG,GAAG,CAACG,QAAJ,CAAazG,mBAAb,EAAkCqF,UAAU,CAACjF,cAA7C;EACAkG,GAAG,CAACG,QAAJ,CAAaxG,mBAAb,EAAkCoF,UAAU,CAAChF,cAA7C;;;;;AAIFuG,IAAI,CAAC,8BAAD,EAAiCjB,CAAC,IAAI;QAClCW,GAAG,GAAGH,iBAAiB,EAA7B;MAEIU,WAAW,GAAG,KAAlB;EACAC,4BAAY,CACVR,GADU,EAEV7B,gBAAY,CAAC;IACXC,IAAI,EAAE;MAACqC,WAAW,EAAEnH;KADT;IAEXkF,QAAQ,EAAE,CAAC;MAACiC;KAAF,KAAmB;MAC3BpB,CAAC,CAAC7D,EAAF,CAAKiF,WAAL;MACAF,WAAW,GAAG,IAAd;;GAJQ,CAFF,CAAZ;EAUAlB,CAAC,CAACqB,IAAF,CAAOH,WAAP,EAAoB,sBAApB;EAEAlB,CAAC,CAACsB,GAAF;CAhBE,CAAJ;AAmBAL,IAAI,CAAC,gEAAD,EAAmEjB,CAAC,IAAI;QACpEuB,WAAW,GAAGC,0BAAU,CAC5BhB,iBAD4B,EAE5BO,MAF4B,CAA9B;EAKAf,CAAC,CAACyB,MAAF,CAAS,MAAMF,WAAW,CAAC7E,KAAZ,EAAf,EAAoC,uCAApC,EAN0E;;EAS1EsD,CAAC,CAAC0B,YAAF,CAAe,MAAMH,WAAW,CAACxE,IAAZ,EAArB,EAAyC,wBAAzC;EACAiD,CAAC,CAAC0B,YAAF,CACE,MAAMH,WAAW,CAAC7E,KAAZ,EADR,EAEE,gDAFF;EAKAsD,CAAC,CAAC0B,YAAF,CAAe,MAAMH,WAAW,CAACxE,IAAZ,EAArB,EAAyC,wBAAzC;EACAiD,CAAC,CAAC0B,YAAF,CACE,MAAMH,WAAW,CAACxE,IAAZ,EADR,EAEE,oCAFF;EAKAiD,CAAC,CAACsB,GAAF;CArBE,CAAJ;AAwBAL,IAAI,CAAC,kDAAD,EAAqDjB,CAAC,IAAI;QACtDS,UAAU,GAAGV,iBAAiB,CAACC,CAAD,CAApC;;QACM2B,UAAU,GAAG,MAAM;UACjBhB,GAAG,GAAG,IAAIC,YAAJ,CAAQ,SAAR,EAAmBC,EAAE,IAAIA,EAAzB,CAAZ;IACAF,GAAG,CAACG,QAAJ,CAAa3G,WAAb,EAA0BsG,UAA1B;IACAE,GAAG,CAACG,QAAJ,CAAa7B,gDAAb,EAAmCU,kBAAkB,EAArD;IACAqB,kBAAkB,CAACL,GAAD,CAAlB;WACOA,GAAP;GALF;;QAOMY,WAAW,GAAGC,0BAAU,CAACG,UAAD,EAAaZ,MAAb,CAA9B;EAEAf,CAAC,CAAC9D,MAAF,CACEuE,UAAU,CAACP,kBAAX,OAAoC,CADtC,EAEE,8DAFF;EAIAqB,WAAW,CAACxE,IAAZ;EACAiD,CAAC,CAAC9D,MAAF,CACEuE,UAAU,CAACP,kBAAX,OAAoC,CADtC,EAEE,gDAFF;EAKAF,CAAC,CAACsB,GAAF;CArBE,CAAJ;AAwBAL,IAAI,CAAC,kCAAD,EAAqCjB,CAAC,IAAI;QACtCJ,WAAW,GAAGD,kBAAkB,EAAtC;QACMc,UAAU,GAAGV,iBAAiB,EAApC;;QACM4B,UAAU,GAAG,MAAM;UACjBhB,GAAG,GAAG,IAAIC,YAAJ,CAAQ,SAAR,EAAmBC,EAAE,IAAIA,EAAzB,CAAZ;IACAF,GAAG,CAACG,QAAJ,CAAa3G,WAAb,EAA0BsG,UAA1B;IACAE,GAAG,CAACG,QAAJ,CAAa7B,gDAAb,EAAmCW,WAAnC;IACAoB,kBAAkB,CAACL,GAAD,CAAlB;WACOA,GAAP;GALF,CAH4C;;;MAYxCiB,iBAAiB,GAAG,CAAxB;EACAhC,WAAW,CAAC3B,EAAZ,CAAgB,GAAEwB,iBAAkB,uBAApC,EAA4DH,OAAO,IAAI;IACrEsC,iBAAiB;IACjB5B,CAAC,CAAC9D,MAAF,CAASoD,OAAO,KAAKuC,SAArB,EAAgC,kCAAhC;GAFF;EAIAjC,WAAW,CAAC3B,EAAZ,CAAgB,GAAEwB,iBAAkB,YAApC,EAAiDH,OAAO,IAAI;IAC1DsC,iBAAiB;IACjB5B,CAAC,CAAC9D,MAAF,CAASoD,OAAO,KAAKuC,SAArB,EAAgC,uBAAhC;GAFF;EAIAjC,WAAW,CAAC3B,EAAZ,CAAgB,GAAEwB,iBAAkB,uBAApC,EAA4DH,OAAO,IAAI;IACrEsC,iBAAiB;IACjB5B,CAAC,CAAC9D,MAAF,CAASoD,OAAO,KAAKuC,SAArB,EAAgC,kCAAhC;GAFF;EAIAjC,WAAW,CAAC3B,EAAZ,CAAgB,GAAEwB,iBAAkB,kBAApC,EAAuDH,OAAO,IAAI;IAChEsC,iBAAiB;IACjB5B,CAAC,CAAC9D,MAAF,CAASoD,OAAO,KAAKuC,SAArB,EAAgC,6BAAhC;GAFF;EAIAjC,WAAW,CAAC3B,EAAZ,CAAgB,GAAEwB,iBAAkB,iBAApC,EAAsDH,OAAO,IAAI;IAC/DsC,iBAAiB;IACjB5B,CAAC,CAAC9D,MAAF,CAASoD,OAAO,KAAKuC,SAArB,EAAgC,4BAAhC;GAFF;EAIAjC,WAAW,CAAC3B,EAAZ,CAAgB,GAAEwB,iBAAkB,2BAApC,EAAgEH,OAAO,IAAI;IACzEsC,iBAAiB;IACjB5B,CAAC,CAAC9D,MAAF,CAASoD,OAAO,KAAKuC,SAArB,EAAgC,sCAAhC;GAFF;EAIAjC,WAAW,CAAC3B,EAAZ,CAAgB,GAAEwB,iBAAkB,4BAApC,EAAiEH,OAAO,IAAI;IAC1EsC,iBAAiB;IACjB5B,CAAC,CAAC9D,MAAF,CAASoD,OAAO,KAAKuC,SAArB,EAAgC,uCAAhC;GAFF;EAIAjC,WAAW,CAAC3B,EAAZ,CACG,GAAEwB,iBAAkB,+BADvB,EAEEH,OAAO,IAAI;IACTsC,iBAAiB;IACjB5B,CAAC,CAAC9D,MAAF,CACEoD,OAAO,KAAKuC,SADd,EAEE,0CAFF;GAJJ;QAWMN,WAAW,GAAGC,0BAAU,CAACG,UAAD,EAAaZ,MAAb,CAA9B;EAEAQ,WAAW,CAACxE,IAAZ;EAEAtB,YAAY,CAAC,MAAM;IACjBuE,CAAC,CAAC9D,MAAF,CAAS0F,iBAAiB,KAAK,CAA/B,EAAkC,8BAAlC;IACA5B,CAAC,CAACsB,GAAF;GAFU,CAAZ;CAxDE,CAAJ;AA8DAL,IAAI,CAAC,4CAAD,EAA+CjB,CAAC,IAAI;QAChDJ,WAAW,GAAGD,kBAAkB,EAAtC;QACMc,UAAU,GAAGV,iBAAiB,EAApC;;QACM4B,UAAU,GAAG,MAAM;UACjBhB,GAAG,GAAG,IAAIC,YAAJ,CAAQ,SAAR,EAAmBC,EAAE,IAAIA,EAAzB,CAAZ;IACAF,GAAG,CAACG,QAAJ,CAAa3G,WAAb,EAA0BsG,UAA1B;IACAE,GAAG,CAACG,QAAJ,CAAa7B,gDAAb,EAAmCW,WAAnC;IACAoB,kBAAkB,CAACL,GAAD,CAAlB;WACOA,GAAP;GALF,CAHsD;;;MAYlDmB,iBAAiB,GAAG,KAAxB;MACIC,aAAa,GAAG,CAApB;EACAnC,WAAW,CAAC3B,EAAZ,CAAgB,GAAEwB,iBAAkB,YAApC,EAAiDuC,IAAI,IAAI;IACvDD,aAAa,IAAIC,IAAI,CAAC7D,QAAtB;IACA2D,iBAAiB,GAAG,IAApB;GAFF;QAKMP,WAAW,GAAGC,0BAAU,CAACG,UAAD,EAAaZ,MAAb,CAA9B;EACAQ,WAAW,CAAC1E,oBAAZ,GApBsD;;MAuBlDoF,SAAS,GAAG,EAAhB;;OACK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,OAApB,EAA6BA,CAAC,EAA9B,EAAkC;IAChCD,SAAS,CAACE,IAAV,CAAe;MAACC,MAAM,EAAE;KAAxB;;;EAEFH,SAAS,GAAG,EAAZ;EAEAI,UAAU,CAAC,MAAM;IACfd,WAAW,CAACrE,mBAAZ;IACA8C,CAAC,CAAC9D,MAAF,CAAS4F,iBAAT,EAA4B,0BAA5B;IACA9B,CAAC,CAAC9D,MAAF,CAAS6F,aAAa,GAAG,CAAzB,EAA4B,sCAA5B;IACA/B,CAAC,CAACsB,GAAF;GAJQ,EAKP,GALO,CAAV;CA7BE,CAAJ"}